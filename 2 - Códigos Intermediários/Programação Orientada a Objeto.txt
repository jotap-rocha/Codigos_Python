class NomeDaClasse(ClassePai, ClassePai2, etc):
	'Docstring opcional'

	@staticmethod		-> Notação necessária
	def método():		-> Método estático, o qual não utiliza nenhum atributo da classe
		operação

	self.atributo = valor
	.
	.
	.

	def __init__(self, *args):
		self.args = valor				-> Atributos da classe
		NomeDaClasse.VariavelDeClasse = operação qualquer

	def método(self, args): -> Métodos da classe, os quais serão operados (público). O args é simplesmente
		operação	para sinalizar que você pode passar qualquer parâmetro ali dentro

	def _método(self, args): -> Métodos da classe, os quais serão operados (privado, observe o "_"). O args
		operação	 é simplesmente para sinalizar que você pode passar qualquer parâmetro ali
				 dentro

Essa parte de baixo você segue com a programação normal


**********************************************************************************

*FUNÇÕES*
getattr(obj, argDaClasse) -> Acessa o atributo do objeto
hasattr(obj, argDaClasse, valor) -> Verifica se o atributo existe ou não
delattr(obj, argDaClasse) -> Exclui o atributo
issubclass(sub, sup) -> Retorna True se a subclasse fornecida realmente for
subclasse da superclasse fornecida

isinstance(obj, class) -> Retorna True se o objeto for uma instância da classe
fornecida

*MÉTODOS DE SOBRECARGA DE BASE*
__init__(self, args) -> Construtor
__del__(self) -> Destruidor
__repr__(self) -> Representação de string avaliada
__str__(self) -> Representação de string imprimível
__cmp__(self, x) -> Comparação de objetos